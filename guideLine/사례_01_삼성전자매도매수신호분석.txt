

아래 코드는 야후 파이낸스에서 삼성전자 종목의 일일 주가 데이터를 다운로드하여 
이를 기반으로 매수/매도 신호를 생성하고 백테스트를 실행하는 클래스인 AutoTrader를 정의합니다.

__init__ 메서드에서는 삼성전자 종목의 일일 주가 데이터를 yfinance 패키지를 사용하여 다운로드합니다. 
generate_signals 메서드에서는 이 데이터를 기반으로 매수/매도 신호를 생성하고, 
run_backtest 메서드에서는 이 신호 run_backtest 메서드에서는 generate_signals 메서드에서 생성된 매수/매도 신호를 기반으로 백테스트를 수행합니다. 이를 위해 bt 라이브러리를 사용합니다.

먼저, 백테스트 시작 날짜와 종료 날짜를 설정합니다. 이후 bt.Strategy 클래스를 상속받아 전략 클래스를 정의합니다. 이 클래스에서는 next 메서드를 오버라이드하여 매일매일의 포지션을 결정합니다.

bt.Backtest 클래스를 사용하여 백테스트를 수행하고, bt.run 함수를 호출하여 결과를 출력합니다. 이 결과는 수익률, 샤프 지수, 최대 낙폭 등을 포함합니다.

run_backtest 메서드는 매매 시뮬레이션을 수행합니다. 모든 매매 거래는 해당 거래일의 시가(open price)에서 체결됩니다. 초기 투자 금액은 1,000,000원으로 가정되며, 수수료는 고려하지 않습니다.

매매 거래는 generate_signals 메서드에서 생성된 매수/매도 신호를 기반으로 이루어집니다. 즉, 매수 신호가 생성된 경우 당일 시가에서 주식을 매수하고, 매도 신호가 생성된 경우 당일 시가에서 보유한 주식을 매도합니다. 이러한 매매 거래를 통해 얻은 수익금은 주식의 종가(close price)에서 결산합니다.

결과적으로, run_backtest 메서드는 일일 수익률, 누적 수익률, 투자 기간 수익금, 투자 기간 복리 연평균 수익률 
등 다양한 성과 지표를 계산하여 출력합니다. 이를 통해 해당 매매 전략의 성과를 평가할 수 있습니다.








import yfinance as yf
import pandas as pd
from datetime import datetime
import time

start_time = time.time()
print(f"시작 시각은 {time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(start_time))}입니다.")

class AutoTrader:
    def __init__(self, ticker):
        self.ticker = ticker
        self.start_date = '2015-01-01'
        self.end_date = datetime.now().strftime('%Y-%m-%d')
        self.df = yf.download(self.ticker, start=self.start_date, end=self.end_date)
    
    def generate_signals(self):
        self.df['SMA5'] = self.df['Adj Close'].rolling(window=5).mean()
        self.df['SMA20'] = self.df['Adj Close'].rolling(window=20).mean()
        self.df['SMA60'] = self.df['Adj Close'].rolling(window=60).mean()
        self.df['Prev Close'] = self.df['Adj Close'].shift(1)
        self.df['Prev Volume'] = self.df['Volume'].shift(1)
        
        self.df['Buy'] = ((self.df['SMA5'] >= self.df['SMA20']) & (self.df['SMA20'] >= self.df['SMA60']) &
                          (self.df['Adj Close'] > self.df['Prev Close']) & (self.df['Volume'] > self.df['Prev Volume']))
        self.df['Sell'] = ((self.df['SMA5'] <= self.df['SMA20']) & (self.df['SMA20'] <= self.df['SMA60']) &
                           (self.df['Adj Close'] < self.df['Prev Close']) & (self.df['Volume'] > self.df['Prev Volume']))
        
    def run_backtest(self, start_cash=1000000):
        cash = start_cash
        num_stocks = 0
        
        for i, row in self.df.iterrows():
            if row['Buy']:
                num_stocks = int(cash / row['Adj Close'])
                cash -= num_stocks * row['Adj Close']
            elif row['Sell']:
                cash += num_stocks * row['Adj Close']
                num_stocks = 0
                
        final_value = cash + num_stocks * self.df.iloc[-1]['Adj Close']
        return final_value

if __name__ == '__main__':
    at = AutoTrader('005930.KS')
    at.generate_signals()
    print(at.run_backtest())

print(f"종료 시각은 {time.strftime('%Y-%m-%d %H:%M:%S', time.localtime())}입니다.")
print(f"소요시간은 {time.time() - start_time:.2f}초입니다.")



from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

# 입력 변수와 종속 변수를 준비합니다.
X = df[['per', '환율', '금리', '당기순이익']]
y = df['선정 or 비선정']

# train 데이터와 test 데이터를 분리합니다.
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Random Forest 모델을 초기화합니다.
rf = RandomForestClassifier(n_estimators=100, random_state=42)

# Random Forest 모델을 학습합니다.
rf.fit(X_train, y_train)

# 학습된 Random Forest 모델을 사용하여 예측합니다.
y_pred = rf.predict(X_test)

# 예측 결과를 평가합니다.
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy}")
